﻿<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file=".\Dump2MultipleFiles.ttinclude" #>
<# string ShaderName = "LifeBar"; #>
<# string RendererClassName = ShaderName + "Renderer"; #>
<# string VertexShaderName = ShaderName + "Vert"; #>
<# string FragmentShaderName = ShaderName + "Frag"; #>
<# string GeometryShaderName = ShaderName + "Geom"; #>
/*
本文件无用。
有用的是<#= ShaderName #>.cs和<#= RendererClassName #>.cs。
*/
<# var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)}; #>
<#
    manager.StartBlock(ShaderName + ".cssl.cs");
#>
namespace CSharpShadingLanguage.<#= ShaderName #>
{
	// 不可将此文件中的代码复制到其他文件内（如果包含了其他的using ...;，那么CSSL2GLSL.exe就无法正常编译这些代码了。）
    using CSharpShadingLanguage;

#if DEBUG

    class VS_GS_VERTEX
    {
        public vec3 normal;
    }
	
    class GS_FS_VERTEX
    {
        public vec3 color;
    }

    /// <summary>
    /// 一个<see cref="<#= VertexShaderName #>"/>对应一个(vertex shader+fragment shader+..shader)组成的shader program。
    /// 这就是C#Shader形式的vertex shader。
    /// </summary>
    [Dump2File(true)]
	[GLSLVersion(GLSLVersion.v150)]
    sealed class <#= VertexShaderName #> : VertexCSShaderCode
    {
        /// <summary>
        /// vertex's position.
        /// </summar>
        [In]
        vec3 in_Position;

        /// <summary>
        /// vertex's normal.
        /// </summar>
        [In]
        vec3 in_Normal;

        [Out]
        VS_GS_VERTEX vertex_out;

        /// <summary>
        /// scale, rotate and translate model.
        /// </summar>
        [Uniform]
        mat4 modelMatrix;

        /// <summary>
        /// setup camera's position, target and up.
        /// </summar>
        [Uniform]
        mat4 viewMatrix;

        /// <summary>
        /// project 3D scene to 2D screen.
        /// </summar>
        [Uniform]
        mat4 projectionMatrix;

        public override void main()
        {
            // TODO: this is where you should start with vertex shader. Only ASCII code are welcome.
            gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(in_Position, 1.0f);

            vertex_out.normal = in_Normal;
            // this is where your vertex shader ends.
        }
    }

    /// <summary>
    /// 一个<see cref="<#= FragmentShaderName #>"/>对应一个(vertex shader+fragment shader+..shader)组成的shader program。
    /// 这就是C#Shader形式的fragment shader。
    /// </summary>
    [Dump2File(true)]
	[GLSLVersion(GLSLVersion.v150)]
    sealed class <#= FragmentShaderName #> : FragmentCSShaderCode
    {

        [In]
        GS_FS_VERTEX fragment_in;

        /// <summary>
        /// color that fragment shader dumped.
        /// </summar>
        [Out]
        vec4 outColor;

        public override void main()
        {
            // TODO: this is where you should start with fragment shader. Only ASCII code are welcome.
            vec3 color = fragment_in.color;
            if (color.r < 0) { color.r = -color.r; }
            if (color.g < 0) { color.g = -color.g; }
            if (color.b < 0) { color.b = -color.b; }
            outColor = vec4(color, 1.0f);
            // this is where your fragment shader ends.
        }
    }

	[Dump2File(true)]
	[GLSLVersion(GLSLVersion.v150)]
    sealed class <#= GeometryShaderName #> : GeometryCSShaderCode
    {
        public override InType LayoutIn
        {
            get { return InType.triangles; }
        }

        public override OutType LayoutOut
        {
            get { return OutType.triangle_strip; }
        }

        public override int max_vertices
        {
            get { return 27; }
        }

        [In]
        VS_GS_VERTEX[] vertex_in;

        [Out]
        GS_FS_VERTEX vertex_out;

        [Uniform]
        float normalLength = 0.5f;

        /// <summary>
        /// scale, rotate and translate model.
        /// </summar>
        [Uniform]
        mat4 modelMatrix;

        /// <summary>
        /// setup camera's position, target and up.
        /// </summar>
        [Uniform]
        mat4 viewMatrix;

        /// <summary>
        /// project 3D scene to 2D screen.
        /// </summar>
        [Uniform]
        mat4 projectionMatrix;

        public override void main()
        {
            int i;

            for (i = 0; i < gl_in.length(); i++)
            {
                vertex_out.color = vertex_in[i].normal;
                vec4 position = gl_in[i].gl_Position;
                gl_Position = projectionMatrix * viewMatrix * (modelMatrix * position);
                EmitVertex();
            }
            EndPrimitive();

            for (i = 0; i < gl_in.length(); i++)
            {
                vertex_out.color = vec3(1, 1, 1);

                vec4 position = gl_in[i].gl_Position;
                vec4 target = vec4(position.xyz + vertex_in[i].normal * normalLength, 1.0f);
                {
                    vec4 v0 = position;
                    gl_Position = projectionMatrix * viewMatrix * (modelMatrix * v0);
                    EmitVertex();

                    vec4 v1 = target;
                    if (target.x > position.x) { v1.x += normalLength / 30.0f; }
                    else { v1.x -= normalLength / 10.0f; }
                    gl_Position = projectionMatrix * viewMatrix * (modelMatrix * v1);
                    EmitVertex();

                    vec4 v2 = position;
                    gl_Position = projectionMatrix * viewMatrix * (modelMatrix * v2);
                    EmitVertex();

                    vec4 v3 = target;
                    if (target.y > position.y) { v3.y += normalLength / 30.0f; }
                    else { v3.y -= normalLength / 10.0f; }
                    gl_Position = projectionMatrix * viewMatrix * (modelMatrix * v3);
                    EmitVertex();

                    vec4 v4 = position;
                    gl_Position = projectionMatrix * viewMatrix * (modelMatrix * v4);
                    EmitVertex();

                    vec4 v5 = target;
                    if (target.z > position.z) { v5.z += normalLength / 30.0f; }
                    else { v5.z -= normalLength / 10.0f; }
                    gl_Position = projectionMatrix * viewMatrix * (modelMatrix * v5);
                    EmitVertex();

                    vec4 v6 = position;
                    gl_Position = projectionMatrix * viewMatrix * (modelMatrix * v6);
                    EmitVertex();

                    vec4 v7 = target;
                    if (target.x > position.x) { v7.x += normalLength / 30.0f; }
                    else { v7.x -= normalLength / 10.0f; }
                    gl_Position = projectionMatrix * viewMatrix * (modelMatrix * v7);
                    EmitVertex();

                }

                EndPrimitive();
            }
        }
    }

#endif
}
<#
    manager.EndBlock();
#>
<#
    manager.StartBlock(RendererClassName + ".cs");
#>
namespace Renderers
{
    using CSharpGL;
    using CSharpGL.Objects;
    using CSharpGL.Objects.Models;
    using CSharpGL.Objects.Shaders;
    using CSharpGL.Objects.VertexBuffers;
    using GLM;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;

    /// <summary>
    /// 一个<see cref="<#= RendererClassName #>"/>对应一个(vertex shader+fragment shader+..shader)组成的shader program。
    /// </summary>
    public class <#= RendererClassName #> : RendererBase
    {
        ShaderProgram shaderProgram;

        #region VAO/VBO renderers

        VertexArrayObject vertexArrayObject;

        const string strin_Position = "in_Position";
        BufferRenderer positionBufferRenderer;

        //const string strin_Color = "in_Color";
        //BufferRenderer colorBufferRenderer;

        const string strin_Normal = "in_Normal";
        BufferRenderer normalBufferRenderer;

        IndexBufferRendererBase indexBufferRenderer;

        #endregion

        #region uniforms

        const string strmodelMatrix = "modelMatrix";
        public mat4 modelMatrix;

        const string strviewMatrix = "viewMatrix";
        public mat4 viewMatrix;

        const string strprojectionMatrix = "projectionMatrix";
        public mat4 projectionMatrix;

        #endregion


        public PolygonModes polygonMode = PolygonModes.Filled;

        private int elementCount;

        private IModel model;

        public <#= RendererClassName #>(IModel model)
        {
            this.model = model;
        }

        protected void InitializeShader(out ShaderProgram shaderProgram)
        {
            var vertexShaderSource = ManifestResourceLoader.LoadTextFile("<#= ShaderName #>.vert");
            var fragmentShaderSource = ManifestResourceLoader.LoadTextFile("<#= ShaderName #>.frag");
            var geometryShaderSource = ManifestResourceLoader.LoadTextFile("<#= ShaderName #>.geom");

            shaderProgram = new ShaderProgram();
            shaderProgram.Create(vertexShaderSource, fragmentShaderSource, geometryShaderSource);
        }

        protected void InitializeVAO()
        {
            IModel model = this.model;

            this.positionBufferRenderer = model.GetPositionBufferRenderer(strin_Position);
            //this.colorBufferRenderer = model.GetColorBufferRenderer(strin_Color);
            this.normalBufferRenderer = model.GetNormalBufferRenderer(strin_Normal);
            this.indexBufferRenderer = model.GetIndexes() as IndexBufferRendererBase;

            {
                IndexBufferRenderer renderer = this.indexBufferRenderer as IndexBufferRenderer;
                if (renderer != null)
                {
                    this.elementCount = renderer.ElementCount;
                }
            }
            {
                ZeroIndexBufferRenderer renderer = this.indexBufferRenderer as ZeroIndexBufferRenderer;
                if (renderer != null)
                {
                    this.elementCount = renderer.VertexCount;
                }
            }
        }

        protected override void DoInitialize()
        {
            InitializeShader(out shaderProgram);

            InitializeVAO();
        }

        protected override void DoRender(RenderEventArgs e)
        {
            ShaderProgram program = this.shaderProgram;
            // 绑定shader
            program.Bind();

            program.SetUniformMatrix4(strprojectionMatrix, projectionMatrix.to_array());
            program.SetUniformMatrix4(strviewMatrix, viewMatrix.to_array());
            program.SetUniformMatrix4(strmodelMatrix, modelMatrix.to_array());

            int[] originalPolygonMode = new int[1];
            GL.GetInteger(GetTarget.PolygonMode, originalPolygonMode);

            GL.PolygonMode(PolygonModeFaces.FrontAndBack, this.polygonMode);

            GL.Enable(GL.GL_PRIMITIVE_RESTART);
            GL.PrimitiveRestartIndex(uint.MaxValue);

            if (this.vertexArrayObject == null)
            {
                var vertexArrayObject = new VertexArrayObject(
                    this.positionBufferRenderer,
                    //this.colorBufferRenderer,
                    this.normalBufferRenderer,
                    this.indexBufferRenderer);
                vertexArrayObject.Create(e, this.shaderProgram);

                this.vertexArrayObject = vertexArrayObject;
            }
            else
            {
                this.vertexArrayObject.Render(e, this.shaderProgram);
            }

            GL.Disable(GL.GL_PRIMITIVE_RESTART);

            GL.PolygonMode(PolygonModeFaces.FrontAndBack, (PolygonModes)(originalPolygonMode[0]));

            // 解绑shader
            program.Unbind();
        }

        protected override void DisposeUnmanagedResources()
        {
            if (this.vertexArrayObject != null)
            {
                this.vertexArrayObject.Dispose();
            }
        }

        public void DecreaseVertexCount()
        {
            {
                IndexBufferRenderer renderer = this.indexBufferRenderer as IndexBufferRenderer;
                if (renderer != null)
                {
                    if (renderer.ElementCount > 0)
                    {
                        renderer.ElementCount--;
                    }
                    return;
                }
            }
            {
                ZeroIndexBufferRenderer renderer = this.indexBufferRenderer as ZeroIndexBufferRenderer;
                if (renderer != null)
                {
                    if (renderer.VertexCount > 0)
                    {
                        renderer.VertexCount--;
                    }
                    return;
                }
            }
        }

        public void IncreaseVertexCount()
        {
            {
                IndexBufferRenderer renderer = this.indexBufferRenderer as IndexBufferRenderer;
                if (renderer != null)
                {
                    if (renderer.ElementCount < this.elementCount)
                    {
                        renderer.ElementCount++;
                    }
                    return;
                }
            }
            {
                ZeroIndexBufferRenderer renderer = this.indexBufferRenderer as ZeroIndexBufferRenderer;
                if (renderer != null)
                {
                    if (renderer.VertexCount < this.elementCount)
                    {
                        renderer.VertexCount++;
                    }
                    return;
                }
            }
        }
    }
}

<#
    manager.EndBlock();

    manager.Process(true);
#>